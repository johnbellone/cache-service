// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: protobuf/cache.proto

package ping

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Cache service

func NewCacheEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Cache service

type CacheService interface {
	Put(ctx context.Context, in *CacheRequest, opts ...client.CallOption) (*CacheResponse, error)
	Get(ctx context.Context, in *CacheRequest, opts ...client.CallOption) (*CacheResponse, error)
}

type cacheService struct {
	c    client.Client
	name string
}

func NewCacheService(name string, c client.Client) CacheService {
	return &cacheService{
		c:    c,
		name: name,
	}
}

func (c *cacheService) Put(ctx context.Context, in *CacheRequest, opts ...client.CallOption) (*CacheResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Put", in)
	out := new(CacheResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Get(ctx context.Context, in *CacheRequest, opts ...client.CallOption) (*CacheResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Get", in)
	out := new(CacheResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cache service

type CacheHandler interface {
	Put(context.Context, *CacheRequest, *CacheResponse) error
	Get(context.Context, *CacheRequest, *CacheResponse) error
}

func RegisterCacheHandler(s server.Server, hdlr CacheHandler, opts ...server.HandlerOption) error {
	type cache interface {
		Put(ctx context.Context, in *CacheRequest, out *CacheResponse) error
		Get(ctx context.Context, in *CacheRequest, out *CacheResponse) error
	}
	type Cache struct {
		cache
	}
	h := &cacheHandler{hdlr}
	return s.Handle(s.NewHandler(&Cache{h}, opts...))
}

type cacheHandler struct {
	CacheHandler
}

func (h *cacheHandler) Put(ctx context.Context, in *CacheRequest, out *CacheResponse) error {
	return h.CacheHandler.Put(ctx, in, out)
}

func (h *cacheHandler) Get(ctx context.Context, in *CacheRequest, out *CacheResponse) error {
	return h.CacheHandler.Get(ctx, in, out)
}
